{"version":3,"sources":["components/AddCategory.jsx","components/GifGridItem.jsx","helpers/getGifs.js","components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","console","log","trim","length","cat","type","placeholder","value","onChange","target","GifGridItem","title","url","id","className","src","alt","getGif","category","a","encodeURI","fetch","resp","json","respFinal","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setstate","useEffect","getGifs","then","res","useFetchGifs","item","key","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"qMAuCeA,EApCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAerC,OACI,6BACI,2CACA,0BAAMC,SAdG,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAI,gBACTN,EAAWO,OAAOC,OAAS,IAC1BV,GAAc,SAAAW,GAAG,OAAKT,GAAL,mBAAoBS,OACrCR,EAAc,OAUF,2BACAS,KAAK,OACLC,YAAY,uBACZC,MAAOZ,EACPa,SAAU,SAACV,GAAOF,EAAcE,EAAEW,OAAOF,aCN9CG,EAjBK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,IAAa,EAARC,GAE9B,OACI,yBAAKC,UAAU,qDACX,yBAAKC,IAAKH,EAAKI,IAAKL,IACpB,2BAAIA,K,uBCWCM,EAnBJ,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEJP,EAFI,iDAE4CQ,UAAUF,GAFtD,+DAGSG,MAAMT,GAHf,cAGJU,EAHI,gBAIcA,EAAKC,OAJnB,cAIJC,EAJI,OAMHC,EAAQD,EAARC,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAM,IAAD,EACvB,MAAO,CACHf,GAAIe,EAAIf,GACRF,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIC,cAAN,aAAE,EAAYC,iBAAiBlB,QAXhC,kBAgBJc,GAhBI,4CAAH,sDCuDEK,EAjDC,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECHJ,SAACA,GAAc,IAAD,EAEZxB,mBAAS,CAC/B+B,KAAK,GACLO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAoBtC,OAbQC,qBAAU,WACNC,EAAQlB,GAAUmB,MAClB,SAAAC,GAEQJ,EAAS,CACLT,KAAMa,EACNN,SAAS,SAItB,CAACd,IAGLe,EDFsBM,CAAarB,GAArCc,EAfuB,EAevBA,QAAcH,EAfS,EAedJ,KAGd,OACI,oCACI,wBAAIX,UAAU,sCAAsCI,GAGhDc,EAAW,wBAAIlB,UAAU,oCAAd,eAGC,yBAAKA,UAAU,aAGfe,EAAOF,KAAK,SAAAa,GAAI,OACZ,kBAAC,EAAD,eAAaC,IAAKD,EAAK3B,IAAQ2B,UEHhDE,EA7BM,WAElB,IAFwB,EAGYhD,mBADf,CAAC,mBAFE,mBAGjBiD,EAHiB,KAGLlD,EAHK,KAYvB,OACI,oCACG,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BAEOkD,EAAWhB,KAAI,SAACT,EAAU0B,GAAX,OACb,kBAAC,EAAD,CAASH,IAAKG,EAAG1B,SAAUA,U,MCnB/C2B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7d18ff9c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n\r\nconst [inputValue, setInputValue] = useState('')\r\n\r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log('submit hecho')\r\n    if(inputValue.trim().length > 2){\r\n        setCategories(cat => [inputValue, ...cat])\r\n        setInputValue('')\r\n    }\r\n   \r\n    \r\n}\r\n\r\n    return (\r\n        <div>\r\n            <h2>AddCategory</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                    <input\r\n                    type=\"text\" \r\n                    placeholder='selecciona categoria'\r\n                    value={inputValue}\r\n                    onChange={(e) => {setInputValue(e.target.value)}}\r\n                    />\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({title, url, id}) => {\r\n   // console.log(title, url, id)\r\n    return (\r\n        <div className='card animate__animated animate__fadeInBottomRight'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nGifGridItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n  id: PropTypes.string\r\n  \r\n}\r\n\r\nexport default GifGridItem\r\n"," const getGif = async(category) =>{\r\n    // comprobar espacios en la url - usar encodeURI() y  https://\r\n      const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6CojeYdv5M1zZWecWolzTQq3byK0kb5k`\r\n      const resp = await fetch(url)\r\n      const respFinal = await resp.json()\r\n     // console.log(respFinal)\r\n      const {data} = respFinal\r\n      const gifs = data.map(img=>{\r\n          return {\r\n              id: img.id,\r\n              title: img.title,\r\n              url: img.images?.downsized_medium.url\r\n          }\r\n      })\r\n    // console.log(gifs)\r\n    // al ser un metodo async devuelve una promesa\r\n     return gifs\r\n  }\r\n\r\n  export default getGif","import React /*,{ useEffect, useState }*/ from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport GifGridItem from './GifGridItem'\r\n// import getGifs from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nconst GifGrid = ({category}) => {\r\n/*\r\n   const [images, setimages] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n     getGifs(category).then(\r\n         res =>{\r\n            setimages( res )\r\n         })\r\n\r\n    }, [category])\r\nS\r\n  */\r\n // renombrando en la destructuracion con :\r\n  const {loading, data:images} = useFetchGifs(category)\r\n  \r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__flipInX'>{category}</h3>\r\n\r\n            {\r\n                loading ? (<h3 className='animate__animated animate__flash'>Cargando...</h3>)\r\n                          :\r\n                          (\r\n                            <div className='card-grid'>\r\n            \r\n                            {\r\n                            images.map( item  => (\r\n                                <GifGridItem key={item.id} {...item}></GifGridItem>        \r\n                            ))  \r\n                            }\r\n        \r\n                            </div>\r\n                          )\r\n            }\r\n\r\n            \r\n                \r\n          \r\n        </>\r\n    )\r\n}\r\n\r\nGifGrid.propTypes = {\r\n  category : PropTypes.string.isRequired\r\n}\r\n\r\nexport default GifGrid\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading: true\r\n    })\r\n    \r\n            useEffect(() => {\r\n                getGifs(category).then(\r\n                res =>{\r\n                   \r\n                        setstate({\r\n                            data: res,\r\n                            loading: false\r\n                        })\r\n               \r\n                })\r\n            }, [category])\r\n       \r\n   \r\n    return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n   const initialState = ['Rick and Morty']\r\n   const [categories, setCategories] = useState(initialState)\r\n\r\n   /*\r\n   const handleAdd = () => {\r\n     // setCategories([...categories, 'HunterXHunter'])\r\n     setCategories(cat => [...cat, 'HunterXHunter'])\r\n   }\r\n\r\n*/\r\n    return (\r\n        <>\r\n           <h1>GifExpertApp</h1>\r\n           <AddCategory setCategories={setCategories}></AddCategory>\r\n           <hr />\r\n           \r\n           <ol>\r\n               {\r\n                  categories.map((category, i) =>( \r\n                    <GifGrid key={i} category={category}></GifGrid> \r\n                  ))\r\n               }\r\n           </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}